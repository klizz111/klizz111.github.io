import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.BXdwV0mh.js";const l="/img/vscode/1.png",n="/img/vscode/2.png",h="/img/vscode/3.png",p="/img/vscode/4.png",k="/img/vscode/5.png",o="/img/vscode/6.png",r="/img/vscode/7.png",E=JSON.parse('{"title":"自定义个性化VSCode主题","description":"","frontmatter":{"outline":"deep","lastUpdated":true},"headers":[],"relativePath":"vscode_customize.md","filePath":"vscode_customize.md"}'),d={name:"vscode_customize.md"};function g(c,s,m,C,F,y){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="自定义个性化vscode主题" tabindex="-1">自定义个性化VSCode主题 <a class="header-anchor" href="#自定义个性化vscode主题" aria-label="Permalink to &quot;自定义个性化VSCode主题&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><ul><li>之前觉得VSCode的默认语法高亮不够好看，特别是不同语言之间的高亮差异太大了，同时也想着整一个霓虹灯效果，结果人机CSDN上都是清一色的复制粘贴，全让替换成<em>SynthWave &#39;84</em>这个主题，但是说白了就是<em><strong>Custom CSS and JS Loader</strong></em>这个插件罢了😅，网上的一堆文章半天扯不到重点。</li><li>这篇文章讲一下怎么用这个插件实现主题自定义，主要是如何选取想要自定义的元素，剩下的样式想要怎么定义直接AI就行。</li></ul><h2 id="插件下载安装" tabindex="-1">插件下载安装 <a class="header-anchor" href="#插件下载安装" aria-label="Permalink to &quot;插件下载安装&quot;">​</a></h2><ul><li>这个不多说了，直接在VSCode的插件市场搜索<em>Custom CSS and JS Loader</em>，安装就行。 <img src="'+l+`" alt="image"></li></ul><h2 id="配置插件" tabindex="-1">配置插件 <a class="header-anchor" href="#配置插件" aria-label="Permalink to &quot;配置插件&quot;">​</a></h2><ul><li>安装完成后，打开VSCode的设置，搜索<em>Custom CSS and JS</em>，找到<em>Custom CSS and JS: Path</em>，点击右侧的<em>Edit in settings.json</em>，在settings.json中添加如下配置：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vscode_custom_css.imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;file:///D://your/path/*.css&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 这里是你css文件的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><h2 id="编写css文件" tabindex="-1">编写CSS文件 <a class="header-anchor" href="#编写css文件" aria-label="Permalink to &quot;编写CSS文件&quot;">​</a></h2><ul><li>然后就可以开始编写css自定义界面了，编写完成后按<em>F1</em>,直接搜CSS，然后选择<em>Reload Custom CSS and JS</em>，就可以看到效果了。 <img src="`+n+'" alt="image"></li><li>如果点了之后没有自动重载的话可以继续按<em>F1</em>，然后选择<em>Developer: Reload Window</em>，就可以看到效果了。</li></ul><h2 id="如何选取想要自定义的元素" tabindex="-1">如何选取想要自定义的元素 <a class="header-anchor" href="#如何选取想要自定义的元素" aria-label="Permalink to &quot;如何选取想要自定义的元素&quot;">​</a></h2><ul><li>这里就需要用到<em>DevTools</em>了，按<em>F1</em>，然后选择<em>Developer: Toggle Developer Tools</em>，打开开发者工具。(或者在上方工具栏-&gt;<em>Help</em>(帮助)-&gt;<em>Toggle Developer Tools</em>(切换开发者工具))</li><li>这里可以先参考<a href="https://github.com/robb0wen/synthwave-vscode" target="_blank" rel="noreferrer"><em>SynchWave &#39;84</em></a>的主题，或者我在这基础上添加了一些元素的<a href="./css.html">主题</a>。</li></ul><h3 id="选取元素的方法" tabindex="-1">选取元素的方法 <a class="header-anchor" href="#选取元素的方法" aria-label="Permalink to &quot;选取元素的方法&quot;">​</a></h3><ol><li>直接选取：打开Dev Tools后，点击左上角的鼠标图标，然后在想要选取的元素上点击一下，就可以在右侧的<em>Elements</em>中看到对应的元素了。这里显示是<em>span.mtk10</em>。</li></ol><blockquote><p>这里以代码高亮为例，可以看到，代码块被语言服务器标记为<em><strong>mtk</strong></em>*的形式，这边由于class只作用于编辑器中，所以直接用类选择器就行了。 <img src="'+h+`" alt="image"></p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 这里要实现霓虹效果主要是text-shadow属性 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.mtk10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#9cdcfe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-shadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #393a33</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #2e80d2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #32ece6dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #2ee1e775</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>使用Dev Tools的元素检视工具：在上一步的基础上如果想要选取更深层的元素，如工具栏上的某一个小图标，可以先跟<strong>1</strong>一样点击选取，等到右侧元素同步后，右键点击想要选取的元素，选择<em>Copy(复制)</em>-&gt;<em>Copy selector(复制selector)</em>，就可以复制到该元素的选择器了。</li></ol><blockquote><p>如我在这里选择右下角终端的×图标 <img src="`+p+'" alt="image"> 最后复制出来的selector就是这一个元素的了</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#workbench</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">panel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.composite.title.has-composite-bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.global-actions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> a</span></span></code></pre></div></blockquote><ol start="3"><li>利用<strong>样式</strong>工具，可以直接在<em>Elements</em>中选中元素后，右侧的<em>Styles</em>中就会显示该元素的所有样式了，悬浮到selector上可以看到这个selector影响的所有元素，适用于对例如左边栏下边栏等存在多种元素的情况，也可以用来检查前面两种方法选取的元素是否正确。</li></ol><blockquote><p><img src="'+k+'" alt="image"><img src="'+o+'" alt="image"></p></blockquote><ol start="4"><li>对于一些奇奇怪怪难以选中的其实还可以试试<strong>录制器</strong>工具，这里就不多展开了</li></ol><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><ul><li>其实这个插件还支持导入js的，但是Electron这里的加载顺序好像是先加载自定义的js再渲染页面，所以基本上可以说用不了。</li><li>而且VSCode现在默认是不支持动画效果的，如果想要有动画效果可以试一下<em><strong>VSCode Animations</strong></em>这个插件，就是挺吃性能的。</li><li>最后贴一下我自己写的<a href="./css.html">主题</a>的效果。 <img src="'+r+'" alt="image"></li></ul>',23)]))}const v=i(d,[["render",g]]);export{E as __pageData,v as default};
