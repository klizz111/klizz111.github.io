import{_ as t,c as e,o as s,ag as l}from"./chunks/framework.BXdwV0mh.js";const i="/img/lattice/1/1.png",n="/img/lattice/1/2.png",u=JSON.parse('{"title":"格密码学习笔记一：什么是格？","description":"","frontmatter":{"outline":"deep","prev":false,"next":{"text":"二、Babai算法与GGH加密方案","link":"lattice/lattice_2"},"head":[["link",{"rel":"stylesheet","href":"/katex.min.css"}]]},"headers":[],"relativePath":"lattice/lattice_1.md","filePath":"lattice/lattice_1.md"}'),r={name:"lattice/lattice_1.md"};function m(c,a,o,p,h,_){return s(),e("div",null,a[0]||(a[0]=[l('<h1 id="格密码学习笔记一-什么是格" tabindex="-1">格密码学习笔记一：什么是格？ <a class="header-anchor" href="#格密码学习笔记一-什么是格" aria-label="Permalink to &quot;格密码学习笔记一：什么是格？&quot;">​</a></h1><ul><li><a href="https://zhuanlan.zhihu.com/p/161411204" target="_blank" rel="noreferrer">格简介</a></li></ul><h2 id="格的定义" tabindex="-1">格的定义 <a class="header-anchor" href="#格的定义" aria-label="Permalink to &quot;格的定义&quot;">​</a></h2><p><img src="'+i+'" alt="格"></p><ul><li>说白了就是一个线性无关的矩阵，既<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mi>e</mi><mi>t</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">Det \\neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.716em;"></span><span class="strut bottom" style="height:0.9309999999999999em;vertical-align:-0.215em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">D</span><span class="mord mathit">e</span><span class="mord mathit">t</span><span class="mrel">≠</span><span class="mord mathrm">0</span></span></span></span>。</li><li>对于格更直观的理解：例如在一个二维的空间中存在一个线性无关的基向量，显然两个向量可以组成一个四边形，通过不断的平移这个四边形可以把整个二维空间划分为一个个小的四边形，这些小四边形就叫做格。</li></ul><h2 id="优质基与劣质基" tabindex="-1">优质基与劣质基 <a class="header-anchor" href="#优质基与劣质基" aria-label="Permalink to &quot;优质基与劣质基&quot;">​</a></h2><p><img src="'+n+'" alt="优质基与劣质基"></p><ul><li>关于优质基的生成可以参考<a href="https://klizz.top/lattice/lattice_3.html#%E4%BB%A3%E7%A0%81%E4%B8%BE%E4%BE%8B" target="_blank" rel="noreferrer">这里</a></li></ul>',8)]))}const f=t(r,[["render",m]]);export{u as __pageData,f as default};
